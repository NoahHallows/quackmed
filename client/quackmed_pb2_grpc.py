# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import quackmed_pb2 as quackmed__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in quackmed_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LoginServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSalt = channel.unary_unary(
                '/LoginService/GetSalt',
                request_serializer=quackmed__pb2.salt_request.SerializeToString,
                response_deserializer=quackmed__pb2.password_salt.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/LoginService/Login',
                request_serializer=quackmed__pb2.login_request.SerializeToString,
                response_deserializer=quackmed__pb2.login_result.FromString,
                _registered_method=True)
        self.CreateAccount = channel.unary_unary(
                '/LoginService/CreateAccount',
                request_serializer=quackmed__pb2.register_request.SerializeToString,
                response_deserializer=quackmed__pb2.register_result.FromString,
                _registered_method=True)
        self.CheckUserExists = channel.unary_unary(
                '/LoginService/CheckUserExists',
                request_serializer=quackmed__pb2.user_exists_request.SerializeToString,
                response_deserializer=quackmed__pb2.user_exists_response.FromString,
                _registered_method=True)


class LoginServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSalt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUserExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoginServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSalt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSalt,
                    request_deserializer=quackmed__pb2.salt_request.FromString,
                    response_serializer=quackmed__pb2.password_salt.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=quackmed__pb2.login_request.FromString,
                    response_serializer=quackmed__pb2.login_result.SerializeToString,
            ),
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=quackmed__pb2.register_request.FromString,
                    response_serializer=quackmed__pb2.register_result.SerializeToString,
            ),
            'CheckUserExists': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUserExists,
                    request_deserializer=quackmed__pb2.user_exists_request.FromString,
                    response_serializer=quackmed__pb2.user_exists_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LoginService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('LoginService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoginService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSalt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoginService/GetSalt',
            quackmed__pb2.salt_request.SerializeToString,
            quackmed__pb2.password_salt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoginService/Login',
            quackmed__pb2.login_request.SerializeToString,
            quackmed__pb2.login_result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoginService/CreateAccount',
            quackmed__pb2.register_request.SerializeToString,
            quackmed__pb2.register_result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckUserExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoginService/CheckUserExists',
            quackmed__pb2.user_exists_request.SerializeToString,
            quackmed__pb2.user_exists_response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class appointmentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAppointmentBook = channel.unary_unary(
                '/appointmentService/GetAppointmentBook',
                request_serializer=quackmed__pb2.appointment_book_request.SerializeToString,
                response_deserializer=quackmed__pb2.appointment_book.FromString,
                _registered_method=True)
        self.UpdateAppointmentBook = channel.unary_unary(
                '/appointmentService/UpdateAppointmentBook',
                request_serializer=quackmed__pb2.update_slot.SerializeToString,
                response_deserializer=quackmed__pb2.update_slot_result.FromString,
                _registered_method=True)


class appointmentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAppointmentBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAppointmentBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_appointmentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAppointmentBook': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppointmentBook,
                    request_deserializer=quackmed__pb2.appointment_book_request.FromString,
                    response_serializer=quackmed__pb2.appointment_book.SerializeToString,
            ),
            'UpdateAppointmentBook': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAppointmentBook,
                    request_deserializer=quackmed__pb2.update_slot.FromString,
                    response_serializer=quackmed__pb2.update_slot_result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'appointmentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('appointmentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class appointmentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAppointmentBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/appointmentService/GetAppointmentBook',
            quackmed__pb2.appointment_book_request.SerializeToString,
            quackmed__pb2.appointment_book.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAppointmentBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/appointmentService/UpdateAppointmentBook',
            quackmed__pb2.update_slot.SerializeToString,
            quackmed__pb2.update_slot_result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
