syntax = "proto3";

// Login
message login_request {
  string username = 1;
  bytes password = 2;
}

message login_result {
  bool success = 1;
  bytes token = 2;
}

// Check is a user exists
message user_exists_request {
  string username = 1;
}

message user_exists_response {
  bool exists = 1;
}

// Get salt
message salt_request {
  string username = 1;
}

message password_salt {
  bytes salt = 1;
}

// Register
message register_result {
  bool success = 1;
  bytes token = 2;
}

message register_request {
  string username = 1;
  bytes password = 2;
  bytes salt = 3;
}

// Delete user
message delete_request {
  string username = 1;
}

message delete_result {
  bool success = 1;
}

// Logout
message logout_request {
  string username = 1;
}

message logout_response {
  bool success = 1;
}
// Appointment book
message appointment_book_request {
  int32 start_time = 1;
  int32 end_time = 2;
}

message time_slot_response {
  // When does the time block start and end?
  int32 start_time = 1;
  int32 end_time = 2;
  // What type is it, eg 1 for appointment, 2 for free ect
  int32 type = 3;
  // Who is the owner of this block, ie who is this block with
  string owner = 4;
  string patient = 5;
}

message appointment_book {
  repeated time_slot_response slot = 1;
}

// eg for creating appointments
message update_slot {
  int32 start_time = 1;
  int32 end_time = 2;
  int32 new_type = 3;
  string patient = 4;
}

message update_slot_result {
  bool success = 1;
}

service AuthService {
  rpc GetSalt(salt_request) returns (password_salt);
  rpc Login(login_request) returns (login_result);
  rpc CreateAccount(register_request) returns (register_result);
  rpc CheckUserExists(user_exists_request) returns (user_exists_response);
  rpc DeleteUser(delete_request) returns (delete_result);
  rpc Logout(logout_request) returns (logout_response);
}

service appointmentService {
  rpc GetAppointmentBook(appointment_book_request) returns (appointment_book);
  rpc UpdateAppointmentBook(update_slot) returns (update_slot_result);
}
